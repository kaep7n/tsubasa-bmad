# Quality Gate: BUGFIX-training-schema
# Story: Fix Training Sessions Schema Migration Conflict
# Reviewer: Quinn (QA Agent)
# Date: 2025-10-27

gate_decision: CONCERNS
risk_level: MEDIUM-HIGH

# Gate Status: CONCERNS (requires fixes before production deployment)
# - Migration logic is fundamentally sound
# - Critical idempotency issue must be resolved
# - Orphaned record handling should be added
# - Security and data migration logic validated

## Critical Issues (MUST FIX)

critical_issues:
  - id: CRIT-001
    severity: HIGH
    category: Idempotency
    description: RLS policy creation not idempotent
    location: supabase/migrations/20251027000002_fix_training_sessions_schema.sql:72-110
    impact: Migration fails if run twice (e.g., after partial failure)
    details: |
      CREATE POLICY statements don't use IF NOT EXISTS clause.
      On second run, policies already exist â†’ "policy already exists" error.

      Lines affected:
      - Line 72: CREATE POLICY "Users can view their team's training sessions"
      - Line 83: CREATE POLICY "Users can create training sessions for their team"
      - Line 93: CREATE POLICY "Users can update their team's training sessions"
      - Line 103: CREATE POLICY "Users can delete their team's training sessions"
    recommendation: |
      Add DROP POLICY IF EXISTS for each policy before CREATE, OR
      PostgreSQL doesn't support CREATE POLICY IF NOT EXISTS, so use:

      DROP POLICY IF EXISTS "policy_name" ON training_sessions;
      CREATE POLICY "policy_name" ...

      This pattern is already used for the old policies (lines 11-14),
      so apply the same pattern for the new policies.
    blocking: true

## Medium Priority Issues (SHOULD FIX)

medium_issues:
  - id: MED-001
    severity: MEDIUM
    category: Data Integrity
    description: No validation for orphaned coach_id records
    location: supabase/migrations/20251027000002_fix_training_sessions_schema.sql:28-32
    impact: Migration fails if training_sessions.coach_id has no matching teams.created_by
    details: |
      UPDATE statement populates team_id from coach_id via teams table.
      If coach_id doesn't exist in teams.created_by, team_id remains NULL.
      Then ALTER COLUMN team_id SET NOT NULL fails (line 48).
    recommendation: |
      Add pre-migration validation query:

      -- Check for orphaned records
      DO $$
      DECLARE
        orphaned_count INTEGER;
      BEGIN
        SELECT COUNT(*) INTO orphaned_count
        FROM training_sessions ts
        WHERE NOT EXISTS (
          SELECT 1 FROM teams t WHERE t.created_by = ts.coach_id
        )
        AND ts.team_id IS NULL;

        IF orphaned_count > 0 THEN
          RAISE EXCEPTION 'Found % orphaned training_sessions with no matching team', orphaned_count;
        END IF;
      END $$;
    blocking: false

  - id: MED-002
    severity: MEDIUM
    category: Performance
    description: No performance optimization for large tables
    location: supabase/migrations/20251027000002_fix_training_sessions_schema.sql:28-32
    impact: UPDATE with JOIN could lock table for extended period
    details: |
      Single UPDATE statement processes all rows at once.
      For large training_sessions tables (10k+ rows), this could cause:
      - Extended table lock
      - Migration timeout
      - Blocked queries during migration
    recommendation: |
      For production with large datasets, consider:
      - Batched updates (UPDATE with LIMIT in loop)
      - Progress logging
      - Timeout handling

      However, for current MVP scope this is likely acceptable.
      Monitor migration duration during testing.
    blocking: false

## Positive Findings

strengths:
  - Most DDL operations use IF EXISTS / IF NOT EXISTS (good idempotency)
  - Data migration includes WHERE team_id IS NULL check (idempotent)
  - NOT NULL constraint set conditionally via DO block (robust)
  - RLS policies correctly restrict access to user's team (secure)
  - SELECT policy includes soft-delete filter (correct)
  - Foreign key CASCADE delete is appropriate
  - Backwards compatibility maintained (coach_id retained)
  - Clear comments and section organization

## Security Review

security_assessment: PASS
security_findings:
  - rls_policies: |
      All 4 RLS policies validated:
      - SELECT: Restricts to user's team + filters deleted_at IS NULL âœ…
      - INSERT: Validates team ownership via WITH CHECK âœ…
      - UPDATE: Restricts to user's team âœ…
      - DELETE: Restricts to user's team âœ…

      Pattern: team_id IN (SELECT id FROM teams WHERE created_by = auth.uid())
      This ensures users can only access their own team's data.

  - data_leakage_risk: LOW
    details: No data leakage vectors identified

  - sql_injection_risk: NONE
    details: No dynamic SQL, all statements are static

  - authorization: CORRECT
    details: RLS policies properly enforce row-level security

## Test Coverage Assessment

test_status: PENDING
test_requirements:
  manual_testing:
    - description: Test migration on fresh database
      command: supabase db reset
      expected: Migration completes without errors
      priority: CRITICAL

    - description: Test migration on database with existing data
      setup: |
        1. Create test training_sessions with coach_id
        2. Run supabase db push
      expected: |
        - team_id populated for all rows
        - All training_sessions have non-null team_id
        - RLS policies enforce access control
      priority: CRITICAL

    - description: Test orphaned record scenario
      setup: |
        1. Insert training_session with invalid coach_id (no matching team)
        2. Run migration
      expected: Migration fails with clear error message
      priority: HIGH

    - description: Test idempotency
      setup: |
        1. Run migration once (should succeed or fail)
        2. Fix any issues
        3. Run migration again
      expected: Second run should succeed without errors (after fixing CRIT-001)
      priority: HIGH

    - description: Verify RLS policies
      setup: |
        1. Create two users with separate teams
        2. Create training sessions for each team
        3. Attempt cross-team access
      expected: Users can only see/modify their own team's data
      priority: CRITICAL

## Compliance Check

acceptance_criteria_coverage:
  - id: AC1
    description: Migration successfully adds team_id column
    status: PASS
    notes: ALTER TABLE with IF NOT EXISTS is correct

  - id: AC2
    description: Existing data migrates from coach_id to team_id
    status: CONCERNS
    notes: Logic correct, but no orphaned record handling (MED-001)

  - id: AC3
    description: Old RLS policies using coach_id are dropped
    status: PASS
    notes: Lines 11-14 correctly drop old policies

  - id: AC4
    description: New RLS policies using team_id are created
    status: CONCERNS
    notes: Logic correct, but not idempotent (CRIT-001)

  - id: AC5
    description: Migration is idempotent
    status: FAIL
    notes: RLS policy creation will fail on second run (CRIT-001)

  - id: AC6
    description: coach_id column retained for backwards compatibility
    status: PASS
    notes: Column not dropped, correctly preserved

  - id: AC7
    description: Migration runs on fresh database
    status: PENDING_TEST
    notes: Requires manual testing

  - id: AC8
    description: Migration runs on existing database
    status: PENDING_TEST
    notes: Requires manual testing

  - id: AC9
    description: All indexes updated to use team_id
    status: PASS
    notes: Old index dropped, new indexes created with IF NOT EXISTS

## Gate Decision Rationale

decision_reasoning: |
  Gate Status: CONCERNS (not PASS, not FAIL)

  The migration is fundamentally sound:
  âœ… Correct data migration logic (coach_id â†’ team_id via teams table)
  âœ… Security validated (RLS policies restrict to user's team)
  âœ… Backwards compatible (coach_id retained)
  âœ… Most operations are idempotent

  However, critical issues prevent immediate deployment:
  ðŸ”´ CRIT-001: RLS policy creation not idempotent (BLOCKING)
  ðŸŸ¡ MED-001: No orphaned record handling (should fix)
  ðŸŸ¡ AC5 fails due to idempotency issue

  Recommendation:
  1. Fix CRIT-001 (RLS policy idempotency) - REQUIRED
  2. Add orphaned record validation (MED-001) - RECOMMENDED
  3. Test migration on fresh + existing databases
  4. Re-review after fixes applied

  Risk Level: MEDIUM-HIGH
  - Schema change on critical table
  - RLS policy replacement
  - Requires testing before production deployment

  Estimated effort to resolve: 30-60 minutes

## Recommendations

next_steps:
  immediate:
    - Fix CRIT-001: Add DROP POLICY IF EXISTS before each CREATE POLICY
    - Add orphaned record validation (MED-001)
    - Test migration on fresh database (supabase db reset)
    - Test migration on database with sample data

  before_production:
    - Test idempotency (run migration twice)
    - Verify RLS policies with multi-user test
    - Monitor migration duration on production-like data volume
    - Have rollback plan ready

  optional:
    - Consider batched updates for large datasets
    - Add progress logging for long-running UPDATE
    - Document manual cleanup steps if migration fails

## Review Metadata

reviewer: Quinn (QA Agent)
review_date: 2025-10-27
agent_model: Claude Sonnet 4.5 (claude-sonnet-4-5-20250929)
review_duration: Comprehensive architecture and security review
files_reviewed:
  - docs/stories/BUGFIX-training-schema.story.md
  - supabase/migrations/20251027000002_fix_training_sessions_schema.sql

review_methodology:
  - SQL correctness analysis
  - Idempotency validation
  - Security assessment (RLS policies)
  - Data integrity validation
  - Risk profiling
  - Acceptance criteria traceability
